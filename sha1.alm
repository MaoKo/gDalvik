
__sha1? := $00
namespace __sha1?
    repeat $50, i:$00
        virtual at $00
            w#i?::
            dd $00
        end virtual
    end repeat
    calminstruction calminstruction?.split? temporary?*, index?*, _data?*, data?*, lists?*&
            local       list, subscribe, first
            declconst   _subscribe, subscribe
            compute     first, $01
            arrange     lists, lists,
        loop:
            match       list=, lists?, lists
            jyes        next
            exit
        next:
            asmcmd      invoke, =compute _subscribe, (index - list)
            asmcmd      invoke, =asmcmd =invoke, ===load _data : ===dword ===from ===__sha1?.===w#_subscribe:$00
            check       (first)
            jno         xor
            asmcmd      invoke, =compute temporary, (data)
            jump        update
        xor:
            asmcmd      invoke, =compute temporary, (temporary =xor data)
        update:
            compute     first, $00
            jump        loop
    end calminstruction
end namespace

calminstruction (return?) sha1? virtual?*, size?, base?
        local       virtbck, data, chunk, index, temporary
        local       a, b, c, d, e, f, k
        local       h0, h1, h2, h3, h4
        declconst   _data, data
        declconst   _virtbck, virtbck
        compute     h0, $67452301
        compute     h1, $EFCDAB89
        compute     h2, $98BADCFE
        compute     h3, $10325476
        compute     h4, $C3D2E1F0
        asmcmd      invoke, _virtbck =virtcpy virtual, size, base, $00
        asmcmd      invoke, =virtual virtbck
        execasm     db $80
    padding:
        check       ((($*$08) mod $200) <> $1C0)
        jno         continue
        execasm     db $00
        jump        padding
    continue:
        asmcmd      invoke, =dq (virtbck.=size? =bswap $08)
        compute     size, ($)
        execasm     end virtual
        compute     chunk, $00
    loop:
        check       (chunk < size)
        jyes        load
        compute     temporary, ((h4)); or (h3 shl $20) or (h2 shl $40) or (h1 shl $60) or (h0 shl $80))
        publish     return, temporary
        exit
    load:
        asmcmd      invoke, =load _data:$40 =from _virtbck:chunk
        compute     index, $00
    nested_1:
        check       (index < $10)
        jno         next_1
        asmcmd      invoke, =store ((_data =shl ($20 * index)) =and $FFFFFFFF) : =dword =at =__sha1?.=w#index:$00
        compute     index, (index + $01)
        jump        nested_1
    next_1:
        compute     index, $10
    nested_2:
        check       (index < $50)
        jno         next_2
        split       temporary, index, _data, data, $03, $08, $0E, $10
        execasm     temporary rol $20, temporary, $01
        asmcmd      invoke, =store (temporary) : =dword =at =__sha1?.=w#index:$00
        compute     index, (index + $01)
        jump        nested_2
    next_2:
        compute     a, h0
        compute     b, h1
        compute     c, h2
        compute     d, h3
        compute     e, h4
        compute     index, $00
    nested_3:
        check       (index < $50)
        jno         next_3
    check_1:
        check       (index <= $13)
        jno         check_2
        compute     f, (b and c) or (((not b) and $FFFFFFFF) and d)
        compute     k, $5A827999
        jump        update
    check_2:
        check       (index <= $27)
        jno         check_3
        compute     f, (b xor c xor d)
        compute     k, $6ED9EBA1
        jump        update
    check_3:
        check       (index <= $3B)
        jno         check_4
        compute     f, ((b and c) or (b and d) or (c and d))
        compute     k, $8F1BBCDC
        jump        update
    check_4:
        compute     f, (b xor c xor d)
        compute     k, $CA62C1D6
    update:
        asmcmd      invoke, =load _data : =dword =from =__sha1?.=w#index:$00
        compute     temporary, (f + e + k + data)
        execasm     temporary rol $20, a, $05
        compute     e, d
        compute     d, c
        execasm     c rol $20, b, $1E
        compute     b, a
        compute     a, temporary
        compute     index, (index + $01)
        jump        nested_3
    next_3:
        compute     h0, (h0 + a)
        compute     h1, (h1 + b)
        compute     h2, (h2 + c)
        compute     h3, (h3 + d)
        compute     h4, (h4 + e)
        compute     chunk, (chunk + $40)
        jump        loop
end calminstruction
