
dalvik? := $01
redefine __prefix? #
match _, __prefix
    namespace dalvik?
        declconst hyphen?, $
        declconst  slash?, @

        macro calminstruction?.token? _result?*, result?*, symbol?*, reset?*
                asmcmd      invoke, _result =identifier symbol
                check       (result = TOKEN?)
                jyes        reset
        end macro

        calminstruction (return?) format? instruction?*
                local       duplicate, current, reach, build, result
                declconst   _result, result
                arrange     duplicate, instruction
                compute     reach, $00
                arrange     build,
            prefix:
                match       current-instruction, instruction
                jno         suffix
                token       _result, result, current, reset
                arrange     build, build#current#hyphen
                compute     reach, $01
                jump        prefix
            suffix:
                match       current/instruction, instruction
                jno         append
                token       _result, result, current, reset
                arrange     build, build#current#slash
                compute     reach, $01
            append:
                check       (reach)
                jno         reset
                token       _result, result, instruction, reset
                arrange     build, build#instruction
                jump        leave
            reset:
                arrange     build, duplicate
            leave:
                publish     return, build
        end calminstruction
        purge calminstruction?.token?

        _1 format abc-wide?
        match __1, _1
            display `__1, $0A
        end match

        element register?
        threshold_04? := $00010
        threshold_08? := $00100
        threshold_16? := $10000

        repeat threshold_16, i:$00
            element _#v#i? : register + i
        end repeat

        calminstruction calminstruction?.threshold? target?*, threshold?*
                local       random
                asmcmd      invoke, =compute target, (((target) =metadata $01) - =dalvik?.=register?)
                asmcmd      invoke, =check (target < threshold)
                execasm     unique random
                asmcmd      invoke, =jyes random
                execasm	    execasm err ""
                asmcmd      invoke, random:
		end calminstruction

        calminstruction calminstruction? line?*&
                local       name
                declconst   _name, name
                arrange     name, line
                match       name= line?, line 
                jyes        continue
                arrange     line,
            continue:
                asmcmd      invoke, _name =format name
                asmcmd      invoke, =calminstruction name line
        end calminstruction

        calminstruction nop?
                execasm     dw ($00)
        end calminstruction

        iterate <suffix?>,,-wide,-object
            calminstruction move#suffix? vA?*, vB?*
                    ensure      ,register?, vA, vB
                    threshold   vA, threshold_04?
                    threshold   vB, threshold_04?
                    execasm     dw ((((vB shl $04) or vA) shl $08) or ($01 + ((% - $01) * $03)))
            end calminstruction
            calminstruction move#suffix/from16? vAA?*, vBBBB?*
                    ensure      ,register?, vAA, vBBBB
                    threshold   vAA, threshold_08?
                    threshold   vBBBB, threshold_16?
                    execasm     dd ((vBBBB shl $10) or (vAA shl $08) or ($02 + ((% - $01) * $03)))
            end calminstruction
            calminstruction move/16? vAAAA?*, vBBBB?*
                    ensure      ,register?, vAAAA, vBBBB
                    threshold   vAAAA, threshold_16?
                    threshold   vBBBB, threshold_16?
                    execasm     dw ($03 + ((% - $01) * $03))
                    execasm     dd ((vBBBB shl $10) or (vAAAA))
            end calminstruction
        end iterate

        iterate <suffix?*>,-result,-exception
            calminstruction move#suffix? vAA?*
                    ensure      ,register?, vAA
                    threshold   vAA, threshold_08?
                    execasm     dw ((vAA shl $08) or ($0A + ((% - $01) * $03)))
            end calminstruction
            if ((%) = $01)
                iterate <kind?*>,-wide,-object
                    calminstruction move#suffix#kind? vAA?*
                            ensure      ,register?, vAA
                            threshold   vAA, threshold_08?
                            execasm     dw ((vAA shl $08) or ($0B + (% - $01)))
                    end calminstruction
                end iterate
            end if
        end iterate

        calminstruction return-void?	
                execasm     dw ($0E)
        end calminstruction

        iterate <suffix?>,,-wide,-object
            calminstruction return#suffix? vAA?*
                    ensure      ,register?, vAA
                    threshold   vAA, threshold_08?
                    execasm     dw ((vAA shl $08) or ($0F + (% - $01)))
            end calminstruction
        end iterate

        calminstruction const/4? vA?*, B?*
        end calminstruction

        iterate <suffix?*>,-enter,-exit
            calminstruction monitor#suffix? vAA?*
                    ensure      ,register?, vAA
                    threshold   vAA, threshold_08?
                    execasm     dw ((vAA shl $08) or ($1D + (% - $01)))
            end calminstruction
        end iterate

        purge calminstruction?.threshold?, calminstruction?
    end namespace
    restore __prefix?
end match

iterate <global?*>, nop?, move?, return?
    mvmacro global, dalvik?.global
end iterate

calminstruction ?! line?&
        asmcmd      invoke, line
end calminstruction

